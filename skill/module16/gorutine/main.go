//Для решения данной задачи на языке Go можно использовать пакет sync для управления
//горутинами и пакет time для создания задержки. Ниже представлен пример программы,
//которая запускает n горутин, каждая из которых выводит свой идентификатор в консоль каждую секунду.
// Программа будет работать до тех пор, пока пользователь не нажмет клавишу Enter.

package main

import (
	"fmt"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

func main() {
	var n int
	fmt.Print("Введите количество горутин: ")
	_, err := fmt.Scan(&n)
	if err != nil || n <= 0 {
		fmt.Println("Некорректное число, программа завершена.")
		return
	}

	var wg sync.WaitGroup
	wg.Add(n)

	// Создаем канал для обработки сигнала завершения
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	for i := 1; i <= n; i++ {
		go func(id int) {
			defer wg.Done()
			for {
				select {
				case <-sigChan:
					return // Завершаем горутину при получении сигнала
				default:
					fmt.Printf("Горутина %d\n", id)
					time.Sleep(1 * time.Second)
				}
			}
		}(i)
	}

	// Ожидаем нажатия клавиши Enter
	fmt.Println("Нажмите Enter для завершения...")
	fmt.Scanln()

	// Завершаем все горутины
	signal.Stop(sigChan)
	close(sigChan)

	wg.Wait() // Ждем завершения всех горутин
	fmt.Println("Программа завершена.")
}

// Описание работы программы:

//     Программа запрашивает у пользователя количество горутин.
//     Используется sync.WaitGroup для ожидания завершения всех горутин.
//     Каждая горутина выводит свой идентификатор в консоль каждую секунду.
//     Программа ожидает нажатия клавиши Enter для завершения.
//     При нажатии Enter программа завершает выполнение всех горутин и ждет их завершения.

// Запуск программы:

//     Сохраните код в файл с расширением .go, например, main.go.
//     Используйте команду go run main.go для запуска программы.
//     Введите нужное количество горутин и нажмите Enter, чтобы увидеть их вывод.
// Нажмите Enter еще раз, чтобы завершить программу.
