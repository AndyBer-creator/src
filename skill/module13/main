//Вот реализация двоичного дерева, неориентированного графа и
// ориентированного графа на языке Go, включая необходимые функции 
//для вставки, удаления, поиска элементов и печати для двоичного дерева,
// а также функции поиска в ширину для неориентированного графа
// и определения кратчайшего пути для ориентированного графа.


//Здравствуйте!

//Ваш проект демонстрирует хорошую структуру и грамотное использование 
//методов работы с графами и деревьями. Код чистый, понятный, и он охватывает основные алгоритмы работы с графами и деревьями, что заслуживает похвалы.

//Есть несколько моментов, которые стоит доработать:

//1. В методе `Dijkstra` ориентированного графа, если граф несвязный,
// возможна ошибка при выборе текущей вершины, так как `current` может 
// остаться нулевым (значение по умолчанию). Добавьте проверку, 
// чтобы пропускать такие случаи и выходить из цикла.
//2. В реализации метода `Delete` двоичного дерева не учитывается случай,
// когда удаляемый элемент является корнем с двумя детьми. 
 //Хотя технически код работает, его поведение может быть улучшено для оптимизации.
//3. В реализации BFS алгоритма не обработаны ситуации, 
//когда граф может быть несвязным. Добавьте обработку этого случая 
//для полной функциональности.
//Если у вас возникнут вопросы, вы можете обратиться в Пачку 
//в соответствующий канал модуля с заданием/проектом.

//Общий результат: проект выполнен качественно, с хорошим использованием 
//алгоритмических структур. Отличная работа!


// Двоичное дерево


package main

import (
	"fmt"
)

// Node представляет узел двоичного дерева
type Node struct {
	Value int
	Left  *Node
	Right *Node
}

// BinaryTree представляет двоичное дерево
type BinaryTree struct {
	Root *Node
}

// Insert вставляет элемент в двоичное дерево
func (tree *BinaryTree) Insert(value int) {
	tree.Root = insertNode(tree.Root, value)
}

func insertNode(node *Node, value int) *Node {
	if node == nil {
		return &Node{Value: value}
	}
	if value < node.Value {
		node.Left = insertNode(node.Left, value)
	} else {
		node.Right = insertNode(node.Right, value)
	}
	return node
}

// Search ищет элемент в двоичном дереве
func (tree *BinaryTree) Search(value int) bool {
	return searchNode(tree.Root, value)
}

func searchNode(node *Node, value int) bool {
	if node == nil {
		return false
	}
	if node.Value == value {
		return true
	}
	if value < node.Value {
		return searchNode(node.Left, value)
	}
	return searchNode(node.Right, value)
}

// Delete удаляет элемент из двоичного дерева
func (tree *BinaryTree) Delete(value int) {
	tree.Root = deleteNode(tree.Root, value)
}

func deleteNode(node *Node, value int) *Node {
	if node == nil {
		return nil
	}
	if value < node.Value {
		node.Left = deleteNode(node.Left, value)
	} else if value > node.Value {
		node.Right = deleteNode(node.Right, value)
	} else {
		if node.Left == nil {
			return node.Right
		} else if node.Right == nil {
			return node.Left
		}
		minNode := findMin(node.Right)
		node.Value = minNode.Value
		node.Right = deleteNode(node.Right, minNode.Value)
	}
	return node
}

func findMin(node *Node) *Node {
	for node.Left != nil {
		node = node.Left
	}
	return node
}

// Print печатает элементы двоичного дерева в симметричном порядке
func (tree *BinaryTree) Print() {
	printInOrder(tree.Root)
}

func printInOrder(node *Node) {
	if node != nil {
		printInOrder(node.Left)
		fmt.Print(node.Value, " ")
		printInOrder(node.Right)
	}
}

// Пример использования двоичного дерева
func main() {
	tree := &BinaryTree{}
	tree.Insert(5)
	tree.Insert(3)
	tree.Insert(7)
	tree.Insert(2)
	tree.Insert(4)
	tree.Print() // 2 3 4 5 7
	fmt.Println("\nSearch 4:", tree.Search(4))
	tree.Delete(3)
	tree.Print() // 2 4 5 7
}
```

### Неориентированный граф

```go
package main

import (
	"fmt"
)

// Graph представляет неориентированный граф
type Graph struct {
	Vertices map[int][]int
}

// NewGraph создает новый граф
func NewGraph() *Graph {
	return &Graph{Vertices: make(map[int][]int)}
}

// AddEdge добавляет ребро в граф
func (g *Graph) AddEdge(v1, v2 int) {
	g.Vertices[v1] = append(g.Vertices[v1], v2)
	g.Vertices[v2] = append(g.Vertices[v2], v1)
}

// BFS выполняет поиск в ширину
func (g *Graph) BFS(start int) {
	visited := make(map[int]bool)
	queue := []int{start}
	visited[start] = true

	for len(queue) > 0 {
		vertex := queue[0]
		queue = queue[1:]
		fmt.Print(vertex, " ")

		for _, neighbor := range g.Vertices[vertex] {
			if !visited[neighbor] {
				visited[neighbor] = true
				queue = append(queue, neighbor)
			}
		}
	}
}

// Пример использования неориентированного графа
func main() {
	graph := NewGraph()
	graph.AddEdge(1, 2)
	graph.AddEdge(1, 3)
	graph.AddEdge(2, 4)
	graph.AddEdge(3, 5)

	fmt.Print("BFS starting from vertex 1: ")
	graph.BFS(1) // 1 2 3 4 5
}
```

### Ориентированный граф

```go
package main

import (
	"fmt"
	"math"
)

// DirectedGraph представляет ориентированный граф
type DirectedGraph struct {
	Vertices map[int]map[int]float64
}

// NewDirectedGraph создает новый ориентированный граф
func NewDirectedGraph() *DirectedGraph {
	return &DirectedGraph{Vertices: make(map[int]map[int]float64)}
}

// AddEdge добавляет ребро в ориентированный граф
func (g *DirectedGraph) AddEdge(v1, v2 int, weight float64) {
	if g.Vertices[v1] == nil {
		g.Vertices[v1] = make(map[int]float64)
	}
	g.Vertices[v1][v2] = weight
}

// Dijkstra находит кратчайший путь от начальной вершины до всех остальных вершин
func (g *DirectedGraph) Dijkstra(start int) map[int]float64 {
	distances := make(map[int]float64)
	for vertex := range g.Vertices {
		distances[vertex] = math.Inf(1)
	}
	distances[start] = 0

	visited := make(map[int]bool)

	for len(visited) < len(g.Vertices) {
		var current int
		minDistance := math.Inf(1)

		for vertex, distance := range distances {
			if !visited[vertex] && distance < minDistance {
				minDistance = distance
				current = vertex
			}
		}

		visited[current] = true

		for neighbor, weight := range g.Vertices[current] {
			newDistance := distances[current] + weight
			if newDistance < distances[neighbor] {
				distances[neighbor] = newDistance
			}
		}
	}

	return distances
}

// Пример использования ориентированного графа
func main() {
	directedGraph := NewDirectedGraph()
	directedGraph.AddEdge(1, 2, 1.0)
	directedGraph.AddEdge(1, 3, 4.0)
	directedGraph.AddEdge(2, 3, 2.0)
	directedGraph.AddEdge(3, 4, 1.0)

	fmt.Println("Shortest paths from vertex 1:")
	distances := directedGraph.Dijkstra(1)
	for vertex, distance := range distances {
		fmt.Printf("Distance to vertex %d: %.2f\n", vertex, distance)
	}
}
```

### Объяснение кода

1. **Двоичное дерево**:
   - Структура `Node` представляет узел дерева.
   - Структура `BinaryTree` содержит корень дерева и методы для вставки, поиска,
    удаления и печати элементов.

2. **Неориентированный граф**:
   - Структура `Graph` хранит вершины и их соседей.
   - Методы добавляют ребра и выполняют поиск в ширину.

3. **Ориентированный граф**:
   - Структура `DirectedGraph` хранит вершины и веса ребер.
   - Метод `Dijkstra` находит кратчайшие пути от начальной вершины до всех остальных.

### Примечание
Для запуска каждого из примеров используйте отдельный файл Go,
 так как в одном файле могут возникнуть конфликты с функцией `main`.